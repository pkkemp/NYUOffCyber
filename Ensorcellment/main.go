package main

import (
"bufio"
"compress/bzip2"
"fmt"
"io"
"os"
)

var (
// the bzip file
bzipfile string = "/Users/prestonkemp/Desktop/next.bz2"
)

func main() {
// open the file
f, err := os.OpenFile(bzipfile, 0, 0)
if err != nil {
panic(err)
}
defer f.Close()
// create a reader
br := bufio.NewReader(f)
// create a bzip2.reader, using the reader we just created
cr := bzip2.NewReader(br)
// lets do this. parse the file.
err = parsefile(cr)

}

func parsefile(bzipfile io.Reader) error {
var ll string
// create a reader, using the bzip2.reader we were passed
d := bufio.NewReader(bzipfile)
// create a scanner
s := bufio.NewScanner(d)
// scan the file! until Scan() returns "EOF", print out each line
for s.Scan() {
ll = s.Text()
fmt.Printf("ll=%s\n", ll)
}
// we're done. return.
return nil
}
//func main() {
//
//	data, _ := base64.StdEncoding.DecodeString("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")
//	print(data)
//}
