import gmpy2
from Crypto.Util.number import *

def egcd(a, b):
  if (a == 0):
    return (b, 0, 1)
  else:
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)

# Calculates a^{b} mod n when b is negative
def neg_pow(a, b, n):
	assert b < 0
	assert GCD(a, n) == 1
	res = int(gmpy2.invert(a, n))
	res = pow(res, b*(-1), n)
	return res

# e1 --> Public Key exponent used to encrypt message m and get ciphertext c1
# e2 --> Public Key exponent used to encrypt message m and get ciphertext c2
# n --> Modulus
# The following attack works only when m^{GCD(e1, e2)} < n
def common_modulus(e1, e2, n, c1, c2):
	g, a, b = egcd(e1, e2)
	if a < 0:
		c1 = neg_pow(c1, a, n)
	else:
		c1 = pow(c1, a, n)
	if b < 0:
		c2 = neg_pow(c2, b, n)
	else:
		c2 = pow(c2, b, n)
	ct = c1*c2 % n
	m = int(gmpy2.iroot(ct, g)[0])
	return long_to_bytes(m)

e1 = 257
c1 = 99514124939338748792847725077958287433553582186898313347961362760081243856943408395644245198506437955718600859575510058315195575395714040081577825290257785293298213950507013506021065489965326580941410676323194565934131073244537435882117625146027462846546991690583239134738075945595074270071101579749597804353397168092630743209759580826260702992031321908799865744030559074177693066643231528718856593763735377769613026442620477224119555726109176877524127648645483486029968113629362833256601091775791706116926826619332092709172238416619858129742123371453711710248277880274733543446576658843251529611616302249302388741307514122016366002676380348336107698163663300425819239526560215123506901786049674150730452977030872821474073133407822489143526662431762495948479417124256111767638104621372826311179253310775653164709043601739303761520068083275094387045775943591351666302555322662509236900270899982623352678601722188353049958545281541540695996849043297505860397555771280464609414722547488350912089634808520623693957790854016348786651801880501698139409547252214340634876080380799385190628007512192972255001721285728355989005471839692450264956577937320910330787371912188065400953250801199268574418421629665567458907246049850495858551587014
e2 = 65537
c2 = 132065322848635656276232048001660882647257567979378068910963156105308870487967827910672762053488222950902034427560994370357121423013278277998731731458653196333705913727381713140981422914131855969373628544958089714645034890234578237708156617279605799058278068647395160592858070385506962446384361911137514244476435299938924349378418179376561545547372002884547865479501107153856588779337143929243116138626757524939297570465701870550981139771242865488143919136343486801088654254778162963896658566938992188086937880386830879825647373737033250804199101928282836269123970825768330643887713028721894300302756904621752418432148480997695278028965710066796671001219318053442949788580335080644382322609599443518388616243686629631806733210503089541270794377780417783391236565562006049603240489277816561665276394230046761595665023743516615430451737290703853160810050050423892302362515856793928164269391597666022935133643523429022366861928065471452018018829172663136022482220993503471499040471138347766517884387961558934506777336758541787105088683243553505311320623991800099901920146021845190208865026493804262093363752598496896702825938299054186877358240682949167364166692316861933066933390305140810517064996435759989442726938686629227405572155727
n = 150840812969859900310525101138900850083124072094341986730379699184849182420342815619245849957287240023654991597037726801459474436817941489685419748347961295469069039391616626003071516115945871454818665570278227119143302462973480030941848344683149397290999326285512032096415905542584951932353509052307007209207647822566682787492947524347224414680268232899843963026275783819564709532389310262974856968206557651073511654075324746634865651952456899184527223694295938834351145384268900530778799744546660528749291430016717977252603877330723025142990815829910012540795574144780854076162925463300219211602712238686112253055485092896017718535533485081190472762316653217966720364601171677843721299258342366449020034386835139664937648928425873474873637472497027031436462867402971324038151967547934063770366647917007331131343687475854038050357947893024872344157567039862191777860469564166124437160141334808484778625718502389248225739540145320788334268952668351805470078641041867116909756656606599283871494788243275943384862404630656680582436372474926599891589081069941999498633271062626504352129968690389569955250488365481272969693217756277240455182002223931717648164668630723933607400813866072283180822257910589659381611260675664579092790993013
print(common_modulus(e1, e2, n, c1, c2))